{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 :- consult('data.pl'). % Load the data file\
\
% 1. List all orders of a specific customer (as a list).\
list_orders(Customer, Orders) :-\
    customer(CustomerID, Customer),\
    findall(order(CustomerID, OrderID, Items), order(CustomerID, OrderID, Items), Orders).\
\
% 2. Get the number of orders of a specific customer given customer id.\
countOrdersOfCustomer(Customer, Count) :-\
    customer(CustomerID, Customer),\
    findall(OrderID, order(CustomerID, OrderID, _), Orders),\
    length(Orders, Count).\
\
% 3. List all items in a specific customer order given customer id and order id.\
getItemsInOrderById(Customer, OrderID, Items) :-\
    customer(CustomerID, Customer),\
    order(CustomerID, OrderID, Items).\
\
% 4. Get the num of items in a specific customer order given customer Name and order id.\
getNumOfItems(Customer, OrderID, Count) :-\
    customer(CustomerID, Customer),\
    order(CustomerID, OrderID, Items),\
    length(Items, Count).\
\
% 5. Calculate the price of a given order given Customer Name and order id\
calcPriceOfOrder(Customer, OrderID, TotalPrice) :-\
    customer(CustomerID, Customer),\
    order(CustomerID, OrderID, Items),\
    calculate_order_price(Items, TotalPrice).\
\
calculate_order_price([], 0).\
calculate_order_price([Item|Rest], TotalPrice) :-\
    item(Item, _, Price),\
    calculate_order_price(Rest, RemainingPrice),\
    TotalPrice is Price + RemainingPrice.\
\
% 6. Given the item name or company name, determine whether we need to boycott or not.\
isBoycott(ItemOrCompanyName) :-\
    boycott_company(ItemOrCompanyName, _);\
    boycott_company(_, ItemOrCompanyName).\
\
% 7. Given the company name or an item name, find the justification why you need to boycott this company/item.\
whyToBoycott(ItemOrCompanyName, Justification) :-\
    boycott_company(ItemOrCompanyName, Justification);\
    item(ItemOrCompanyName, Company, _),\
    boycott_company(Company, Justification).\
\
% 8. Given an username and order ID, remove all the boycott items from this order.\
removeBoycottItemsFromAnOrder(Customer, OrderID, NewList) :-\
    customer(CustomerID, Customer),\
    order(CustomerID, OrderID, Items),\
    remove_boycott_items(Items, NewList).\
\
remove_boycott_items([], []).\
remove_boycott_items([Item|Rest], NewList) :-\
    (isBoycott(Item) -> remove_boycott_items(Rest, NewList);\
     NewList = [Item|UpdatedRest],\
     remove_boycott_items(Rest, UpdatedRest)).\
\
% 9. Given an username and order ID, update the order such that all boycott items are replaced by an alternative (if exists).\
replaceBoycottItemsFromAnOrder(Customer, OrderID, NewList) :-\
    customer(CustomerID, Customer),\
    order(CustomerID, OrderID, Items),\
    replace_boycott_items(Items, NewList).\
\
replace_boycott_items([], []).\
replace_boycott_items([Item|Rest], NewList) :-\
    (alternative(Item, Alternative) -> \
        NewList = [Alternative|UpdatedRest]\
    ;\
        NewList = [Item|UpdatedRest]\
    ),\
    replace_boycott_items(Rest, UpdatedRest).\
\
% 10. Given an username and order ID, calculate the price of the order after replacing all boycott items by its alternative (if it exists).\
calcPriceAfterReplacingBoycottItemsFromAnOrder(Customer, OrderID, NewList, TotalPrice) :-\
    replaceBoycottItemsFromAnOrder(Customer, OrderID, NewList),\
    calculate_order_price(NewList, TotalPrice).\
\
% 11. Calculate the difference in price between the boycott item and its alternative.\
getTheDifferenceInPriceBetweenItemAndAlternative(Item, Alternative, Difference) :-\
    item(Item, _, ItemPrice),\
    alternative(Item, Alternative),\
    item(Alternative, _, AltPrice),\
    Difference is AltPrice - ItemPrice.\
\
% 12. BONUS: Insert/Remove (1)item, (2)alternative and (3)new boycott company to/from the knowledge base.\
add_item(Item, Company, Price) :-\
    assert(item(Item, Company, Price)).\
\
remove_item(Item) :-\
    retract(item(Item, _, _)).\
\
insert_alternative(Item, Alternative) :-\
    assert(alternative(Item, Alternative)).\
\
remove_alternative(Item) :-\
    retract(alternative(Item, _)).\
\
insert_boycott_company(Company, Reason) :-\
    assert(boycott_company(Company, Reason)).\
\
remove_boycott_company(Company) :-\
    retract(boycott_company(Company, _)).\
}