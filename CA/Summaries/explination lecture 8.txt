Interrupt Cycle:
=============
Interrupt Mechanism ---> Indicates how processor deal with i/o devices.

FGI ---> Input Flag.
Initially the flag input FGI is cleared to 0 and became 1 when input has a charachter from keyboard.
	when FGI =1  -> processor take information from INPR to AC and returned (cleared) to 0 to be ready for another input.

FGO ---> Output Flag.
Initially the output flag FGO is set to 1 and became 0 when Ac send to OUTR a charachter.
	when FGO =0 -> printer takes charachter from OUTR and returned FGO to 1.

Instruction cycle make two operation in parallel
	1- Execute instruction.
	2- Check IEN, FGI, FGO.
---> IEN = 1 if programmer want to enable interrupt.

Filp flop R =1 when? ---> IEN = 1 & FGI || FGO = 1.

Interrupt cycle execute I/O program
	1- save return address of program in M[0] memory (اخر خطوة احنا واقفين عندها في البرنامج).
	2- brach to location 1, PC = 1 (interrupt handler).
	3- make IEN = 0, R = 0 why -> bcs we don't make interrupt inside interrupt (error).
	4- before I/O program end execution it make IEN=1 (enable) for another interrupts.

1 at the left of BUN ---> means indirect addresing branch.
==============================================================================================================
Interrupt Cycle Detailed:
====================
By default IEN = 0 until programmer make IEN = 1.

If T3 = 1, so we in instruction cycle and didn't need to check R' .
====================================================
Control Registers:
===============
If you want to input in AR, find all statements that has AR on L.H.S.
=========================================================
Control Bus:
==========
If you want to take from AR(act as source register), find all register transfer statements that has AR on R.H.S.
Encoder ---> convert from 2^n inputs to n outputs (if X7 = 1 ---> Output = 111).
===========================================================================================
Control AC:
==========
====================================================
Control ALU:
============
====================================================