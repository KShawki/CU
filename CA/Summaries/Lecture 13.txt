Memory Construction:
BC is a combinational cicruit component(because it does not has clock cycle) that stores 1 bit.
if select = 1 it does an operation(read or write)(select works as an enable)(if select = 0, then the BC does nothing and the output = 0 regardless of what is inside it)
if read/write= 1 then it reads from the BC(output will be the bit that was stored in the BC)
if read/write= 0 then it takes input and writes it in BC(Stores it in BC)(output will be 0)
SR latch is not a flipflop, but it operates like the jk flipflop. When the SR = 00, it keeps the bit in it unchanged, and when S is inverse to R, the latch stores the value coming from S(if SR = 10, then it stores 1, if SR = 01, then it stores 0)(The latch does not compliment, because it can never have the inputs of 11, it is undefined)
The BC component is used to make memory
the select is given from the decoder from the address inputs. the address inputs selects the word that we want.
so basically if we want to make the word in row 1 in the figure operate then we will have to assign the address of 01 to the decoder, then the decoder will have one output which is 1, that is connected to the select control inputs of the BC components at row 1, and if the read/write signal is 1, then the output data will have the output of word 1, and if the read/write signal is 0, the word 1 will store the value coming from the data input.
Memory access time is a lot, even when it's a combinational circuit, due to the large delay time that occurs. Except if it was cashe memory, it'll have a circuit like this, but since it is small, the delay will be low.

Memory Interleaving(similar to pipelining):
How to fix the delay in the memory? we'll divide the memory into number of modules, each module will carry number of words that are not sequentially in order in the real memory.
memory is not actually stored physically in a long stack but it is stored in modules
the address in the main memory is divided into two parts, for example address 0001;
	--->Lower order bits(01): Specifies which module that the value is going to be save in(01 -> Module 1 is going to be the location where the values with addresses that begins with 01 are going to be saved at)
	--->Higher order bits(00): Specifies it's address in the module itself(00 -> address 0 in Module 1)
	So address 0001 says that it's value is going to be saved in address 0 in module 1.
these modules have the lower order bits of the actual memory address
EX:lets say we have a memory address which is 0001
A module 01 is created which holds all of its corresponding higher bits(00,01,10,11) so it's the same as (0001,0101,1001,1101)
What do we gain from ordering the words in each module like this(not have sequentially orderd words)? usually the memory holds arrays, and by dividing the main stack into modules and scattering the array on the modules, it makes it easier and faster for the program to request the elements sequentially, because by using the memory interleaving or the pipelining it outputs the elements of the array in sequential order as it was in the main stack
Let's say that each memory word takes about 4 clock cycles till it goes to the data bus
the selections of the Address bus carries the lower order bits to access which module in each clock cycle.
the AR(address register) will carry the higher order bits, to select which word we need from the module.
the selections of the Data bus carries the lower order bits of the address (the 2 least significant bits in the address) 
The address bus will call a memory array(module) each clock cycle(clock cycle 1, bus = 00. Module 0 word 0 will be outputed after 4 clock cycles. clock cycle 2, bus = 01, Module 1 word 0 will be outputed after 4 clock cycles. And so on)
After 4 clock cycles, and after ordring the first word from each module, each clock cycle after that will release the output of each module into the data bus. Ex: In the 5th clock cycle, the first word from the first module has been outputed into the data bus. In the 6th clock cycle, the first word from the second module has been outputed into the data bus. ETC.
Thus using the pipelining struction on the memory access(in the memory hardware), reduces the delay needed to output the needed word from the memory(the only delay will be from the first 4 clock cycles that we were still ordering each word from the module)(the total clock cycles that was ran = the number of memory access + the 3 clock cycles that no word was outputed yet)(n+k-1)
in each clock cycle if we increment the address bus we can output all elements in their actual order
address bus=00 -> module 00 begins to output first element
address bus=01 -> module 01 begins to output first element -> module 00 outputs second element
and so on


Associative memory:
memory is accessed in two ways (Random access, Associative)
Associative memory is where we give an input to the argument register which then searches according to the key register
match register carries bit(M=1, the word is equal to the argument register according to the key, M=0 the word is not equal)(M register tells me which word has matched with the argument register)
if A=0110 and K=1100 this means that i am looking for any elements in the memory that has the first two bits the same as A
x1=1001 doesn't match - x2=0100 match
then output x2 to the match register M and after searching through all the memory we then output elements in register M
//or output x2 is sent to M and output at the same time but this is not clear
the associative memory array takes 3 inputs (input, read, write)
input is the elements that are checked
read=1 then we read inputs
write=1 then we write to M or output
Logic:
an input x each one of its bits is compared to corresponding bit in A and checks if the corresponding bit in K is 1
if so then then x is stored in M

Cache Associative Mapping:
implementation of the memory hardware; the first method: Random Access Memory. The second method: Associative Memory
two components; Main memory(Implementation: Random Access Memory), and Cache memory(can be Associative Memory or Random Access Memory)
cache uses associative mapping to find data which is done as follows:
argument register holds the address which we want to find
the argument register is then compared to key register which supposedly contains all 1s to find that address or maybe it just needs the low order it doesn't really matter the key can be configured to find whatever we need
if an address matches then we output the data of that address
if the address was not found then we retrieve it from the memory then store it in the cache then retrieve it to use it in anything
// associative maping can be used to map data also but the dr didn't talk about that

Cache Direct Mapping:
we split the address into two parts (Tag,Index) the tag and the index together form an address in the actual memory
the index is used as an address for the cache memory
in the cache we store the tag and the data associated with that memory address
EX: memory address 00777 holds value 2340
we access the address 777 in the cache then we check if its tag is the same as the higher order bits in the address then we retrieve them
cache can also store data in blocks of 8 words so if we use the previous example,
if we want to find 777 we output every we check from 770 to 777 if one of them is not present in the cache we retrieve it from the memory and store it in the cache
this is useful because it leads to less interaction with the memory so everything runs faster

Two Way Associative Mapping:
a problem occurs in both previous mapping techniques due to an index having 7 tags so in some cases it may not be as effiecient
to solve that problem we use two way associative mapping
an index in the cache holds two tags and their corresponding data
if we have a new tag different that both tags in that index there are many techniques as to which one is replaced but lets assume that the oldest tag is replaced
why is it called associative ? because it uses the associative technique to check whether a tag is present or not
